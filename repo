#!/bin/bash

################################################################################
#      This file is part of LibreELEC - http://libreelec.tv
#      Copyright (C) 2016-2017 Christian Hewitt (chewitt@libreelec.tv)
#
#  LibreELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  LibreELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with LibreELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

# simple script for building projects for a single distribution

set -e

. config/version

# define distro
DISTRO="LibreELEC"

# clear devices
DEVICES=""

# define colors
black="\\e[0;30m"
boldblack="\\e[1;30m"
red="\\e[0;31m"
boldred="\\e[1;31m"
green="\\e[0;32m"
boldgreen="\\e[1;32m"
yellow="\\e[0;33m"
boldyellow="\\e[1;33m"
blue="\\e[0;34m"
boldblue="\\e[1;34m"
magenta="\\e[0;35m"
boldmagenta="\\e[1;35m"
cyan="\\e[0;36m"
boldcyan="\\e[1;36m"
white="\\e[0;37m"
boldwhite="\\e[1;37m"
endcolor="\\e[0m"

do_user(){
  if [ "$(id -u)" = "0" ]; then
    echo ""
    echo "${red}FAIL: You must not build with root priviliges ${endcolor}"
    echo ""
  fi
}

do_rundir(){
  if [ ! -d target ] && [ ! -d .git ]; then
    echo ""
    echo "${red}FAIL: This script must run from the root folder of the build system ${endcolor}"
    echo ""
    exit
  fi
}

do_select(){
  case $1 in
    Generic)
      declare -a PROJECTS=(Generic)
      do_build "$@"
      ;;
    pi1|RPi)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(RPi)
      else
        declare -a PROJECTS=(RPi) && declare -a DEVICES=(RPi)
      fi
      do_build "$@"
      ;;
    pi2|RPi2)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(RPi2)
      else
        declare -a PROJECTS=(RPi) && declare -a DEVICES=(RPi2)
      fi
      do_build "$@"
      ;;
    imx6)
      declare -a PROJECTS=(imx6)
      do_build "$@"
      ;;
    c2|Odroid_C2|wp2)
      declare -a PROJECTS=(Odroid_C2)
      do_build "$@"
      ;;
    wp|WeTek_Play)
      declare -a PROJECTS=(WeTek_Play)
      do_build "$@"
      ;;
    all)
      if [ "$OS_VERSION" = "7.0" ]; then
        declare -a PROJECTS=(Generic imx6 RPi RPi2 WeTek_Play)
      elif [ "$OS_VERSION" = "8.0" ] || [ "$OS_VERSION" = "8.2" ]; then
        declare -a PROJECTS=(Generic imx6 Odroid_C2 RPi RPi2 WeTek_Play)
      else # we are 9.0 - imx6 removed until it actually works
        declare -a PROJECTS=(Generic Odroid_C2 RPi WeTek_Play)
      fi
      do_build "$@"
      ;;
    xml)
      do_xml "$@"
      ;;
    sync)
      do_reposync "$@"
      ;;
    *)
      echo "NOTHING SELECTED"
      exit 0
  esac
}

do_addon(){
  for PACKAGE in $(find packages -name "$2") ; do
    ADDON=$(basename "$PACKAGE")
    if [ -z "$DEVICE" ]; then
      PROJECT=$PROJECT ARCH=$ARCH scripts/create_addon "$ADDON" 2>&1 | tee -a Log-$PROJECT-addons.log
    else
      PROJECT=$PROJECT DEVICE=$DEVICE ARCH=$ARCH scripts/create_addon "$ADDON" 2>&1 | tee -a Log-$DEVICE-addons.log
    fi
  done
}

do_addons_kodi(){
  for PACKAGE in packages/mediacenter/kodi-binary-addons/* ; do
    ADDON=$(basename "$PACKAGE")
    [[ $ADDON =~ ^(peripheral.joystick)$ ]] && continue
    [[ $ADDON =~ ^(adsp.*)$ ]] && continue
    [[ $ADDON =~ ^(game.*)$ ]] && continue
    if [ -z "$DEVICE" ]; then
      PROJECT=$PROJECT ARCH=$ARCH scripts/create_addon "$ADDON" 2>&1 | tee -a Log-$PROJECT-addons.log
    else
      PROJECT=$PROJECT DEVICE=$DEVICE ARCH=$ARCH scripts/create_addon "$ADDON" 2>&1 | tee -a Log-$DEVICE-addons.log
    fi
  done
}

do_addons_distro(){
  for PACKAGE in $(find packages/addons -not -path "*/mono-depends/*" -iname package.mk) ; do
    . $PACKAGE
    if [ "$PKG_IS_ADDON" = "yes" ] ; then
      ADDON=$PKG_NAME
      if [ -z "$DEVICE" ]; then
        PROJECT=$PROJECT ARCH=$ARCH scripts/create_addon "$ADDON" 2>&1 | tee -a Log-$PROJECT-addons.log
      else
        PROJECT=$PROJECT DEVICE=$DEVICE ARCH=$ARCH scripts/create_addon "$ADDON" 2>&1 | tee -a Log-$DEVICE-addons.log
      fi
    fi
  done
}

do_build(){

  for PROJECT in "${PROJECTS[@]}" ; do

    # arch
    if [ "$OS_VERSION" = "9.0" ]; then
      case $PROJECT in
        Generic) ARCH="x86_64" ;;
        *) ARCH="arm" ;;
      esac
    else
      case $PROJECT in
        Generic) ARCH="x86_64" ;;
        Odroid_C2) ARCH="aarch64" ;;
        *) ARCH="arm" ;;
      esac
    fi

    for DEVICE in "${DEVICES[@]}" ; do
      (
        # check for specific add-on
        if [ -n "$2" ]; then
          do_addon "$@"
        else
          # build kodi add-ons
          do_addons_kodi
          # build distro add-ons
          do_addons_distro
        fi
        # create addons.xml
        do_xml
      )&
    done

  done
}

do_xml(){
  ARCH_PATH="target/addons/$ADDON_VERSION/${DEVICE:-$PROJECT}/$ARCH"
  ARCH_XML='<?xml version="1.0" encoding="UTF-8"?>\n<addons>\n'
  echo -e "${red}*** ${white}CREATE REPO addons.xml for ${DEVICE:-$PROJECT}${red} ***${endcolor}"
  for ADDON in $(find $ARCH_PATH/* -maxdepth 0 -type d); do
    ADDON=$(basename "$ADDON")
    for ARCHIVE in $(find $ARCH_PATH/$ADDON -type f -name "*.zip" | sort -V); do
      if [ -n "$ARCHIVE" ]; then
        ARCHIVE_XML=$(unzip -p "$ARCHIVE" "$ADDON/addon.xml" | grep -v "<\?xml")
        ARCH_XML="$ARCH_XML$ARCHIVE_XML\n"
      fi
    done
  done
  ARCH_XML="$ARCH_XML</addons>"
  echo -e "$ARCH_XML" > $ARCH_PATH/addons.xml
  if [ "$OS_VERSION" != "7.0" ]; then
    gzip -f $ARCH_PATH/addons.xml
    md5sum $ARCH_PATH/addons.xml.gz | cut -f1 -d ' ' > $ARCH_PATH/addons.xml.gz.md5
  else
    gzip -k $ARCH_PATH/addons.xml
    md5sum $ARCH_PATH/addons.xml | cut -f1 -d ' ' > $ARCH_PATH/addons.xml.md5
    md5sum $ARCH_PATH/addons.xml.gz | cut -f1 -d ' ' > $ARCH_PATH/addons.xml.gz.md5
  fi
}

do_reposync(){
  if [ -n "$2" ]; then # sync a specific addon and addons.xml files
    rsync -rP -e "ssh -p 4567" target/addons/$ADDON_VERSION/${DEVICE:-$PROJECT}/$ARCH/$2 \
       releases.libreelec.tv:/var/www/addons/$ADDON_VERSION/${DEVICE:-$PROJECT}/$ARCH/$2
    rsync -rP -e "ssh -p 4567" target/addons/$ADDON_VERSION/${DEVICE:-$PROJECT}/$ARCH/addons.xml* \
       releases.libreelec.tv:/var/www/addons/$ADDON_VERSION/${DEVICE:-$PROJECT}/$ARCH
  else  #sync the entire repo
    rsync -rvuc -e "ssh -p 4567" target/addons/$ADDON_VERSION/* releases.libreelec.tv:/var/www/addons/$ADDON_VERSION
  fi
}

do_user
do_rundir
do_select "$@"

exit 0
