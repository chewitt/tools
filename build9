#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2018-present Team LibreELEC (https://libreelec.tv)

# simple script for building projects for a single distribution

set -e

. distributions/LibreELEC/version

# define colors
black="\e[0;30m"
boldblack="\e[1;30m"
red="\e[0;31m"
boldred="\e[1;31m"
green="\e[0;32m"
boldgreen="\e[1;32m"
yellow="\e[0;33m"
boldyellow="\e[1;33m"
blue="\e[0;34m"
boldblue="\e[1;34m"
magenta="\e[0;35m"
boldmagenta="\e[1;35m"
cyan="\e[0;36m"
boldcyan="\e[1;36m"
white="\e[0;37m"
boldwhite="\e[1;37m"
endcolor="\e[0m"

BUILDER=$(whoami)
DISTRO="LibreELEC"

do_user(){
  if [ "$(id -u)" = "0" ]; then
    echo ""
    echo "${red}FAIL: You must not build with root priviliges ${endcolor}"
    echo ""
  fi
}

do_rundir(){
  if [ ! -d target ] && [ ! -d .git ]; then
    echo ""
    echo "${red}FAIL: This script must run from the root folder of the build system ${endcolor}"
    echo ""
    exit
  fi
}

do_select(){
  case $1 in
    aml|Amlogic)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(LePotato Odroid_C2)
      do_build
      ;;
    atv|ATV)
      declare -a PROJECTS=(ATV)
      do_build
      ;;
    c2|Odroid_C2)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(Odroid_C2)
      do_build
      ;;
    gen|Generic)
      declare -a PROJECTS=(Generic)
      do_build
      ;;
    gxbb)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(GXBB)
      do_build
      ;;
    gxl)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(GXL)
      do_build
      ;;
    gxm)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(GXM)
      do_build
      ;;
    nxp|iMX6)
      declare -a PROJECTS=(NXP) && declare -a DEVICES=(iMX6)
      do_build
      ;;
    k2|NanoPi_K2)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(NanoPi_K2)
      do_build
      ;;
    ke|edge)
      declare -a PROJECTS=(Rockchip) && declare -a DEVICES=(RK3399)
      do_build
      ;;
    kv|Khadas_VIM)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(Khadas_VIM)
      do_build
      ;;
    kv2|Khadas_VIM2)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(Khadas_VIM2)
      do_build
      ;;
    lf|LaFrite)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(LaFrite)
      do_build
      ;;
    lp|LePotato)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(LePotato)
      do_build
      ;;
    p212|P212)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(P212)
      do_build
      ;;
    pi1|RPi)
      declare -a PROJECTS=(RPi) && declare -a DEVICES=(RPi)
      do_build
      ;;
    pi2|RPi2)
      declare -a PROJECTS=(RPi) && declare -a DEVICES=(RPi2)
      do_build
      ;;
    rp|rp64)
      declare -a PROJECTS=(Rockchip) && declare -a DEVICES=(RK3399) && UBOOT_SYSTEM="rockpro64"
      do_build
      ;;
    s1|Slice1)
      declare -a PROJECTS=(RPi) && declare -a DEVICES=(Slice)
      do_build
      ;;
    s3|Slice3)
      declare -a PROJECTS=(RPi) && declare -a DEVICES=(Slice3)
      do_build
      ;;
    s905|S905)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(S905)
      do_build
      ;;
    sml|o2)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(SML5442TW)
      do_build
      ;;
    tx3|Tanix_TX3)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(Tanix_TX3)
      do_build
      ;;
    wh|WeTek_Hub)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(WeTek_Hub)
      do_build
      ;;
    wp2|WeTek_Play_2)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(WeTek_Play_2)
      do_build
      ;;
    sync)
      do_sync
      ;;
    *)
      echo "NOTHING SELECTED"
      exit 0
  esac
}

do_arch(){
  case ${PROJECT} in
    ATV)
      ARCH="i386"
      ;;
    Generic)
      ARCH="x86_64"
      ;;
    *)
      ARCH="arm"
      ;;
  esac
}

do_clearlog(){
  if [ -f Log-${DEVICE:-$PROJECT}-build.log ]; then
    rm Log-${DEVICE:-$PROJECT}-build.log
  fi
}

do_cleanup(){
  # clean stray folders
  if [ -d target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-$LIBREELEC_VERSION ]; then
    rm -rf target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-$LIBREELEC_VERSION | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
  fi
  # clean .kernel and .system files
  rm -f target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-*.kernel | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
  rm -f target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-*.system | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
  rm -f target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-*.sha256 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1

  if [ "$PROJECT" = "Amlogic" -a "$DEVICE" = "Khadas_VIM2" -o "$PROJECT" = "Amlogic" -a "$DEVICE" = "Nexbox_A1" ]; then
    rm -f target/$DISTRO-${DEVICE:-$PROJECT}.aarch64-*.kernel | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
    rm -f target/$DISTRO-${DEVICE:-$PROJECT}.aarch64-*.system | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
    rm -f target/$DISTRO-${DEVICE:-$PROJECT}.aarch64-*.sha256 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
  fi

  # all done
  echo "$DISTRO-${DEVICE:-$PROJECT}.$ARCH-$LIBREELEC_VERSION BUILD COMPLETE!" | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
  exit 0
}

do_build_project(){
  (
    do_clearlog
    if [ "$PROJECT" = "WeTek_Core" -o "$PROJECT" = "WeTek_Hub" -o "$PROJECT" = "WeTek_Play" -o "$PROJECT" = "WeTek_Play_2" ]; then
      DISTRO=$DISTRO PROJECT=$PROJECT ARCH=$ARCH make amlpkg 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
    elif [ "$PROJECT" = "RPi" ] || [ "$PROJECT" = "RPi2" ]; then
      DISTRO=$DISTRO PROJECT=$PROJECT ARCH=$ARCH make noobs 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
    else
      DISTRO=$DISTRO PROJECT=$PROJECT ARCH=$ARCH make image 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
    fi
    do_cleanup
  )&
}

do_build_device(){
  for DEVICE in "${DEVICES[@]}" ; do
    (
      do_clearlog
      if [ "$PROJECT" = "Amlogic" -a "$DEVICE" = "WeTek_Hub" -o "$PROJECT" = "Amlogic" -a "$DEVICE" = "WeTek_Play_2" ]; then
        DISTRO=$DISTRO PROJECT=$PROJECT DEVICE=$DEVICE ARCH=$ARCH make amlpkg 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
      elif [ "$PROJECT" = "Amlogic" -a "$DEVICE" = "Khadas_VIM2" -o "$PROJECT" = "Amlogic" -a "$DEVICE" = "Nexbox_A1" ]; then
        DISTRO=$DISTRO PROJECT=$PROJECT DEVICE=$DEVICE ARCH=aarch64 make image 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
      elif [ "$PROJECT" = "RPi" -a "$DEVICE" = "RPi" ] || [ "$PROJECT" = "RPi" -a "$DEVICE" = "RPi2" ]; then
        DISTRO=$DISTRO PROJECT=$PROJECT DEVICE=$DEVICE ARCH=$ARCH make noobs 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
      else
        DISTRO=$DISTRO PROJECT=$PROJECT DEVICE=$DEVICE ARCH=$ARCH make image 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
      fi
      do_cleanup
    )&
  done
}

do_build(){
  for PROJECT in "${PROJECTS[@]}" ; do
    do_arch
    if [ "$OS_VERSION" = "9.0" ] && [ "$1" = "all" ]; then
      # expand devices for build all
      declare -a DEVICES=(RPi RPi2 Slice Slice3)
    fi
    if [ -z "$DEVICES" ]; then
      do_build_project
    else
      do_build_device
    fi
  done
}

do_sync(){
  . ~/.libreelec/syncdir
  rsync -av --progress -e "ssh -p 4567" target/*.* team.libreelec.net:/home/$BUILDER/www/$SYNCDIR/$OS_VERSION/
}

do_user
do_rundir
do_select "$@"

exit
