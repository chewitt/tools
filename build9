#!/bin/bash

################################################################################
#      This file is part of LibreELEC - http://libreelec.tv
#      Copyright (C) 2016-2017 Christian Hewitt (chewitt@libreelec.tv)
#
#  LibreELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  LibreELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with LibreELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

# simple script for building projects for a single distribution

set -e

. config/version

# define colors
black="\e[0;30m"
boldblack="\e[1;30m"
red="\e[0;31m"
boldred="\e[1;31m"
green="\e[0;32m"
boldgreen="\e[1;32m"
yellow="\e[0;33m"
boldyellow="\e[1;33m"
blue="\e[0;34m"
boldblue="\e[1;34m"
magenta="\e[0;35m"
boldmagenta="\e[1;35m"
cyan="\e[0;36m"
boldcyan="\e[1;36m"
white="\e[0;37m"
boldwhite="\e[1;37m"
endcolor="\e[0m"

BUILDER=$(whoami)
DISTRO="LibreELEC"

do_user(){
  if [ "$(id -u)" = "0" ]; then
    echo ""
    echo "${red}FAIL: You must not build with root priviliges ${endcolor}"
    echo ""
  fi
}

do_rundir(){
  if [ ! -d target ] && [ ! -d .git ]; then
    echo ""
    echo "${red}FAIL: This script must run from the root folder of the build system ${endcolor}"
    echo ""
    exit
  fi
}

do_select(){
  case $1 in
    ATV)
      declare -a PROJECTS=(ATV)
      do_build
      ;;
    Generic)
      declare -a PROJECTS=(Generic)
      do_build
      ;;
    mood|moode|moOde)
      declare -a PROJECTS=(RPi) && declare -a DEVICES=(RPi2)
      DISTRO="moOde"
      do_build
      ;;
    p212)
      declare -a PROJECTS=(Amlogic_GX) && declare -a DEVICES=(P212)
      do_build
      ;;
    pi)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(RPi RPi2 Slice Slice3)
      else
        declare -a PROJECTS=(RPi) && declare -a DEVICES=(RPi RPi2 Slice Slice3)
      fi
      do_build
      ;;
    pi1|RPi)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(RPi)
      else
        declare -a PROJECTS=(RPi) && declare -a DEVICES=(RPi)
      fi
      do_build
      ;;
    pi2|RPi2)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(RPi2)
      else
        declare -a PROJECTS=(RPi) && declare -a DEVICES=(RPi2)
      fi
      do_build
      ;;
    leiot)
      declare -a PROJECTS=(RPi2)
      DISTRO="LEIoT"
      do_build
      ;;
    lepotato|LePotato|spud)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(LePotato)
      do_build
      ;;
    spudgx)
      declare -a PROJECTS=(Amlogic_GX) && declare -a DEVICES=(LePotato)
      do_build
      ;;
    imx6)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(imx6)
      else
        declare -a PROJECTS=(NXP) && declare -a DEVICES=(iMX6)
      fi
      do_build
      ;;
    c2|Odroid_C2)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(Odroid_C2)
      else
        declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(Odroid_C2)
      fi
      do_build
      ;;
    aml|Amlogic)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(S905 LePotato Odroid_C2)
      do_build
      ;;
    s905)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(S905)
      do_build
      ;;
    o2|o2cz|czbox)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(CZBOX)
      do_build
      ;;
    o2gx)
      declare -a PROJECTS=(Amlogic_GX) && declare -a DEVICES=(SML5442TW)
      do_build
      ;;
    s1|Slice1)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(Slice)
      else
        declare -a PROJECTS=(RPi) && declare -a DEVICES=(Slice)
      fi
      do_build
      ;;
    s3|Slice3)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(Slice3)
      else
        declare -a PROJECTS=(RPi) && declare -a DEVICES=(Slice3)
      fi
      do_build
      ;;
    slice)
      if [ "$OS_VERSION" != "9.0" ]; then
        declare -a PROJECTS=(Slice Slice3)
      else
        declare -a PROJECTS=(RPi) && declare -a DEVICES=(Slice Slice3)
      fi
      do_build
      ;;
    wh|WeTek_Hub)
      declare -a PROJECTS=(Amlogic) && declare -a DEVICES=(WeTek_Hub)
      do_build
      ;;
    whgx|gxwh)
      declare -a PROJECTS=(Amlogic_GX) && declare -a DEVICES=(WeTek_Hub)
      do_build
      ;;
    wp|WeTek_Play)
      declare -a PROJECTS=(WeTek_Play)
      do_build
      ;;
    wp2|WeTek_Play_2)
      declare -a PROJECTS=(WeTek_Play_2)
      do_build
      ;;
    wc|WeTek_Core)
      declare -a PROJECTS=(WeTek_Core)
      do_build
      ;;
    all)
      if [ "$OS_VERSION" = "7.0" ]; then
        declare -a PROJECTS=(Generic imx6 RPi RPi2 Virtual WeTek_Play WeTek_Core)
      elif [ "$OS_VERSION" = "8.0" ] || [ "$OS_VERSION" = "8.2" ]; then
        declare -a PROJECTS=(Generic imx6 Odroid_C2 RPi RPi2 Slice Slice3 WeTek_Play WeTek_Play_2 WeTek_Core WeTek_Hub)
      else # we are 9.0 - imx6 temp removed
        declare -a PROJECTS=(Generic Amlogic RPi WeTek_Play WeTek_Play_2 WeTek_Core WeTek_Hub)
      fi
      do_build
      ;;
    release)
      do_release
      ;;
    sync)
      do_sync
      ;;
    *)
      echo "NOTHING SELECTED"
      exit 0
  esac
}

do_arch(){
  case $PROJECT in
    ATV)
      ARCH="i386"
      ;;
    Generic)
      ARCH="x86_64"
      ;;
    Odroid_C2|WeTek_Hub|WeTek_Play_2)
      if [ "$OS_VERSION" != "9.0" ]; then
        ARCH="aarch64"
      else
        ARCH="arm"
      fi
      ;;
    *)
      ARCH="arm"
      ;;
  esac
}

do_clearlog(){
  if [ -f Log-${DEVICE:-$PROJECT}-build.log ]; then
    rm Log-${DEVICE:-$PROJECT}-build.log
  fi
}

do_cleanup(){
  # clean stray folders
  if [ -d target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-$LIBREELEC_VERSION ]; then
    rm -rf target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-$LIBREELEC_VERSION | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
  fi
  # clean .kernel and .system files
  rm -f target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-*.kernel | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
  rm -f target/$DISTRO-${DEVICE:-$PROJECT}.$ARCH-*.system | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1

  # all done
  echo "$DISTRO-${DEVICE:-$PROJECT}.$ARCH-$LIBREELEC_VERSION BUILD COMPLETE!" | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
  exit 0
}

do_build_project(){
  (
    do_clearlog
    if [ "$PROJECT" = "WeTek_Core" -o "$PROJECT" = "WeTek_Hub" -o "$PROJECT" = "WeTek_Play" -o "$PROJECT" = "WeTek_Play_2" ]; then
      DISTRO=$DISTRO PROJECT=$PROJECT ARCH=$ARCH make amlpkg 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
    elif [ "$PROJECT" = "RPi" ] || [ "$PROJECT" = "RPi2" ]; then
      DISTRO=$DISTRO PROJECT=$PROJECT ARCH=$ARCH make noobs 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
    else
      DISTRO=$DISTRO PROJECT=$PROJECT ARCH=$ARCH make image 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
    fi
    do_cleanup
  )&
}

do_build_device(){
  for DEVICE in "${DEVICES[@]}" ; do
    (
      do_clearlog
      if [ "$PROJECT" = "RPi" -a "$DEVICE" = "RPi" ] || [ "$PROJECT" = "RPi" -a "$DEVICE" = "RPi2" ]; then
        DISTRO=$DISTRO PROJECT=$PROJECT DEVICE=$DEVICE ARCH=$ARCH make noobs 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
      else
        DISTRO=$DISTRO PROJECT=$PROJECT DEVICE=$DEVICE ARCH=$ARCH make image 2>&1 | tee -a Log-${DEVICE:-$PROJECT}-build.log || exit 1
      fi
      do_cleanup
    )&
  done
}

do_build(){
  for PROJECT in "${PROJECTS[@]}" ; do
    do_arch
    if [ "$OS_VERSION" = "9.0" ] && [ "$1" = "all" ]; then
      # expand devices for build all
      declare -a DEVICES=(RPi RPi2 Slice Slice3)
    fi
    if [ -z "$DEVICES" ]; then
      do_build_project
    else
      do_build_device
    fi
  done
}

do_release(){
  rsync -av --progress -e "ssh -p 4567" target/*.* releases.libreelec.tv:/home/$BUILDER/
}

do_sync(){
  rsync -av --progress -e "ssh -p 4567" target/*.* team.libreelec.net:/home/$BUILDER/www/samples/$OS_VERSION/
}

do_user
do_rundir
do_select "$@"

exit
